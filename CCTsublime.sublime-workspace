{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"step",
				"stepSize"
			],
			[
				"mu",
				"multipoleSet"
			],
			[
				"mul",
				"multipoleSet"
			],
			[
				"multipol",
				"multipoleSet"
			],
			[
				"multip",
				"multipoleSet"
			],
			[
				"curr",
				"currentSet"
			],
			[
				"set",
				"set_individual_analog_voltages"
			],
			[
				"dac",
				"dac_server"
			],
			[
				"test",
				"testVolts"
			],
			[
				"Cfile",
				"CfilePath"
			],
			[
				"ele",
				"elecDict"
			],
			[
				"Cfil",
				"CfilePath"
			],
			[
				"ana",
				"analogVoltages"
			],
			[
				"newVol",
				"newVoltageSet"
			],
			[
				"digital",
				"digitalVoltage"
			],
			[
				"hex",
				"hexRep"
			],
			[
				"setDA",
				"setDACVoltages"
			],
			[
				"rese",
				"resetFIFODAC"
			],
			[
				"current",
				"currentVoltages"
			],
			[
				"sma",
				"smaDict"
			],
			[
				"reg",
				"registry"
			],
			[
				"a",
				"addTTL"
			],
			[
				"pulse",
				"pulse_length"
			],
			[
				"ad",
				"advanceDACs"
			],
			[
				"Cfi",
				"CfileName"
			],
			[
				"multipole",
				"multipoleMatrix"
			],
			[
				"Cf",
				"CfileName"
			],
			[
				"cfi",
				"CfileName"
			],
			[
				"new",
				"newPosition"
			],
			[
				"end",
				"endPosition"
			],
			[
				"e",
				"e"
			],
			[
				"elec",
				"elecList"
			],
			[
				"vol",
				"voltageMatrix"
			],
			[
				"pro",
				"programSequence"
			],
			[
				"reset",
				"resetDACs"
			],
			[
				"Serial",
				"SerialPorts"
			],
			[
				"setIn",
				"setIndividualDigitalVoltages"
			],
			[
				"num",
				"numCols"
			],
			[
				"DAC",
				"DACs"
			],
			[
				"mult",
				"mult"
			],
			[
				"DA",
				"DACDict"
			],
			[
				"interpolate",
				"interpolatedMultipoleMatrix"
			],
			[
				"setIndiv",
				"setIndividualAnalogVoltages"
			],
			[
				"Qt",
				"QtCore"
			],
			[
				"True",
				"True"
			],
			[
				"start",
				"startPosition"
			],
			[
				"cha",
				"channelConfiguration"
			],
			[
				"Da",
				"DACs"
			],
			[
				"add",
				"addWidget"
			],
			[
				"per",
				"perSide"
			],
			[
				"pul",
				"pulse_sequence"
			],
			[
				"analog",
				"analogVoltages"
			],
			[
				"registry",
				"registryPath"
			],
			[
				"regist",
				"registryPath"
			],
			[
				"adv",
				"advDACs"
			],
			[
				"server",
				"server"
			],
			[
				"optica",
				"optical_pumping_enable"
			],
			[
				"hi",
				"histogram_save_context"
			],
			[
				"pos",
				"positionIndex"
			],
			[
				"ion",
				"ionInfo"
			],
			[
				"rabi_e",
				"rabi_excitation_duration"
			],
			[
				"ta",
				"tableopticsTab"
			],
			[
				"fre",
				"freqRange"
			],
			[
				"read",
				"readline"
			],
			[
				"cl",
				"client"
			],
			[
				"La",
				"LabRAD"
			],
			[
				"Wire",
				"Wire"
			],
			[
				"wire",
				"wireVoltageModulation"
			],
			[
				"value",
				"value"
			],
			[
				"sequ",
				"sequence_parameters"
			],
			[
				"for",
				"format"
			],
			[
				"experiment",
				"experimentPath"
			],
			[
				"se",
				"sequence_parameters"
			],
			[
				"sa",
				"sample_parameters"
			],
			[
				"seq",
				"sequence_parameters"
			],
			[
				"setup",
				"setup_sequence_parameters"
			],
			[
				"Se",
				"SemaphoreExperiment"
			],
			[
				"experi",
				"Experiments"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/home/cct/LabRAD/common/clients/DAC_CONTROL.py",
			"settings":
			{
				"buffer_size": 11788,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/cct/LabRAD/common/okfpgaservers/dacserver/DACServer.py",
			"settings":
			{
				"buffer_size": 15325,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/cct/LabRAD/common/okfpgaservers/dacserver/DACServer.dev.py",
			"settings":
			{
				"buffer_size": 13467,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/cct/LabRAD/common/abstractdevices/script_scanner/configuration.py",
			"settings":
			{
				"buffer_size": 1988,
				"line_ending": "Unix"
			}
		},
		{
			"file": "scripts/experiments/Experiments729/ramsey_scangap.py",
			"settings":
			{
				"buffer_size": 5235,
				"line_ending": "Unix"
			}
		},
		{
			"file": "scripts/PulseSequences/spectrum_rabi.py",
			"settings":
			{
				"buffer_size": 6259,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/cct/LabRAD/common/okfpgaservers/pulser/pulse_sequences/plot_sequence.py",
			"settings":
			{
				"buffer_size": 4908,
				"line_ending": "Unix"
			}
		},
		{
			"file": "scripts/PulseSequences/tests/test_sideband_cooling.py",
			"settings":
			{
				"buffer_size": 374,
				"line_ending": "Unix",
				"name": "from cct.scripts.PulseSequences.spectrum_rabi impo"
			}
		},
		{
			"file": "scripts/experiments/Experiments729/spectrum.py",
			"settings":
			{
				"buffer_size": 6993,
				"line_ending": "Unix"
			}
		},
		{
			"file": "scripts/scriptLibrary/dvParameters.py",
			"settings":
			{
				"buffer_size": 1982,
				"line_ending": "Unix"
			}
		},
		{
			"file": "clients/NodeClient-control.py",
			"settings":
			{
				"buffer_size": 1222,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/cct/LabRAD/common/okfpgaservers/dacserver/DacConfiguration.py",
			"settings":
			{
				"buffer_size": 2843,
				"line_ending": "Unix"
			}
		},
		{
			"file": "scripts/experiments/Experiments729/rabi_flopping.py",
			"settings":
			{
				"buffer_size": 5246,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "from fractions import Fraction\nfrom labrad import units as U\nfrom labrad.units import WithUnit\nimport numpy\nfrom SD_tracker_config import config as conf\n    \nclass EnergyLevel(object):\n    \n    spectoscopic_notation = {\n                            'S': 0,\n                            'P': 1, \n                            'D': 2,\n                            }\n    \n    spectoscopic_notation_rev = {\n                            0 : 'S',\n                            1 : 'P',\n                            2 : 'D',\n                            }\n    \n    \n    def __init__(self, angular_momentum_l, total_angular_momentum_j, spin_s = '1/2'):\n        #convert spectroscopic notation to the spin number\n        if type(angular_momentum_l) == str:\n            angular_momentum_l = self.spectoscopic_notation[angular_momentum_l]\n        total_angular_momentum_j = Fraction(total_angular_momentum_j)\n        spin_s = Fraction(spin_s)\n        S = spin_s\n        self.L = L = angular_momentum_l\n        J = total_angular_momentum_j\n        lande_factor =  self.lande_factor(S, L, J)\n        #sublevels are found, 2* self.J is always an integer, so can use numerator\n        self.sublevels_m =  [-J + i for i in xrange( 1 + (2 * J).numerator)]\n        self.energy_scale = (lande_factor * U.bohr_magneton / U.hplanck) #1.4 MHz / gauss\n    \n    def lande_factor(self, S, L ,J):\n        '''computes the lande g factor'''\n        g = Fraction(3,2) + Fraction( S * (S + 1) - L * (L + 1) ,  2 * J*(J + 1))\n        return g\n    \n    def magnetic_to_energy(self, B):\n        '''given the magnitude of the magnetic field, returns all energies of all zeeman sublevels'''\n        energies = [(self.energy_scale * m * B).inUnitsOf('MHz') for m in self.sublevels_m]\n        representations = [self.frac_to_string(m) for m in self.sublevels_m]\n        return zip(self.sublevels_m,energies,representations)\n    \n    def frac_to_string(self, sublevel):\n        #helper class for converting energy levels to strings\n        sublevel = str(sublevel)\n        if not sublevel.startswith('-'): \n            sublevel = '+' + sublevel\n        together = self.spectoscopic_notation_rev[self.L] + sublevel\n        return together\n\nclass Transitions_SD(object):\n    \n    S = EnergyLevel('S', '1/2')\n    D = EnergyLevel('D', '5/2')\n    allowed_transitions = [0,1,2]\n    \n    def transitions(self):\n        transitions = []\n        for m_s,E_s,repr_s in self.S.magnetic_to_energy(WithUnit(0, 'gauss')):\n            for m_d,E_d,repr_d in self.D.magnetic_to_energy(WithUnit(0, 'gauss')):\n                if abs(m_d-m_s) in self.allowed_transitions:\n                    name = repr_s + repr_d\n                    transitions.append(name)220-22.4166\n        return transitions\n    \n    def get_transition_energies(self, B, zero_offset = WithUnit(0, 'MHz')):\n        '''returns the transition enenrgies in MHz where zero_offset is the 0-field transition energy between S and D'''\n        ans = []\n        for m_s,E_s,repr_s in self.S.magnetic_to_energy(B):\n            for m_d,E_d,repr_d in self.D.magnetic_to_energy(B):\n                if abs(m_d-m_s) in self.allowed_transitions:\n                    name = repr_s + repr_d\n                    diff = E_d - E_s\n                    diff+= zero_offset\n                    ans.append((name, diff))\n        return ans\n    \n    def energies_to_magnetic_field(self, transitions):\n        #given two points in the form [(S-1/2D5+1/2, 1.0 MHz), (-1/2, 5+/2, 2.0 MHz)], calculates the magnetic field\n        try:\n            transition1, transition2 = transitions\n        except ValueError:\n            raise Exception (\"Wrong number of inputs in energies_to_magnetic_field\")\n        ms1,md1 = self.str_to_fractions(transition1[0])\n        ms2,md2 = self.str_to_fractions(transition2[0])\n        en1,en2 = transition1[1], transition2[1]\n        if abs(md1 - ms1) not in self.allowed_transitions or abs(md2 - ms2) not in self.allowed_transitions:\n            raise Exception (\"Such transitions are not allowed\")\n        s_scale = self.S.energy_scale\n        d_scale = self.D.energy_scale\n        B = (en2 - en1) / ( d_scale * ( md2 - md1) - s_scale * (ms2 - ms1) )\n        B = B.inUnitsOf('gauss')\n        offset = en1 - (md1 * d_scale - ms1 * s_scale) * B\n        return B, offset\n        \n    def str_to_fractions(self, inp):\n        #takes S-1/2D5+1/2 and converts to Fraction(-1/2), Fraction(1/2)\n        return Fraction(inp[1:5]), Fraction(inp[6:10])\n\nclass fitter(object):\n    \n    order = conf.fit_order\n    \n    def fit(self, x, y):\n        '''given two inputs x and y returns a polynomail fit'''\n        #if the length of inputs is not sufficient, will avoid erros by decreasing the order of fitting\n        #returns highest order as first element\n        fit_order = min(self.order, x.size - 1)\n        fit = numpy.polyfit(x, y, deg = fit_order)\n        ans = numpy.zeros(self.order + 1)\n        ans[(self.order - fit_order):] = fit\n        return ans\n    \n    def evaluate(self, x, fit):\n        return numpy.polyval(fit, x)\n    \nif __name__ == '__main__':\n    SD = Transitions_SD()\n    fit = fitter()\n \n#    result = SD.get_transition_energies(WithUnit(1.014, 'gauss'), WithUnit(-12.84 ,'MHz'))\n#    for name,freq in result:\n#        print name,freq\n    \n    b,freq = SD.energies_to_magnetic_field([('S-1/2D+3/2', WithUnit(-16.813, 'MHz')), ('S+1/2D+5/2', WithUnit(-15.68, 'MHz'))])\n    print b,freq",
			"file": "/home/cct/LabRAD/common/abstractdevices/SD_tracker/SD_calculator.py",
			"file_size": 5393,
			"file_write_time": 1362612841000000,
			"settings":
			{
				"buffer_size": 5404,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/cct/Desktop/test_pulser.py",
			"settings":
			{
				"buffer_size": 239,
				"line_ending": "Unix",
				"name": "import labrad"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/cct/LabRAD/common/okfpgaservers/pulser/hardwareConfiguration.py",
		"/home/cct/LabRAD/common/okfpgaservers/pulser/sequence.py",
		"/home/cct/LabRAD/cct/scripts/experiments/Experiments729/rabi_flopping.py",
		"/home/cct/LabRAD/cct/scripts/PulseSequences/subsequences/SidebandCooling.py",
		"/home/cct/LabRAD/cct/scripts/PulseSequences/subsequences/SidebandCoolingContinuous.py",
		"/home/cct/LabRAD/cct/scripts/PulseSequences/advanceDACsShuttleLoop.py",
		"/home/cct/LabRAD/cct/scripts/PulseSequences/advanceDACsShuttle.py",
		"/home/cct/LabRAD/common/okfpgaservers/dacserver/DacConfiguration.py",
		"/home/cct/LabRAD/cct/scripts/experiments/shuttling/shuttleLoop.py",
		"/home/cct/LabRAD/cct/scripts/experiments/shuttling/shuttle.py",
		"/home/cct/LabRAD/cct/scripts/experiments/shuttling/shuttlePlot.py",
		"/home/cct/Downloads/contourf3d_demo.py",
		"/home/cct/LabRAD/cct/scripts/experiments/shuttling/shuttleLoopSteps.py",
		"/home/cct/LabRAD/cct/scripts/experiments/shuttling/resetDACs.py",
		"/home/cct/LabRAD/common/abstractdevices/script_scanner/configuration.py",
		"/home/cct/LabRAD/common/clients/script_scanner_gui/tree_view/Controllers.py",
		"/home/cct/LabRAD/cct/scripts/PulseSequences/resetDACs.py",
		"/home/cct/LabRAD/cct/scripts/experiments/shuttling/shuttleNORESET.py",
		"/home/cct/LabRAD/common/abstractdevices/DacConfiguration.py",
		"/home/cct/LabRAD/common/clients/DAC_CONTROL.py",
		"/home/cct/LabRAD/common/abstractdevices/DACServer.py",
		"/home/cct/LabRAD/cct/clients/CCTGUI.py",
		"/home/cct/LabRAD/cct/CCTsublime.sublime-project",
		"/home/cct/LabRAD/common/okfpgaservers/pulser/cctphoton_5.bit",
		"/home/cct/LabRAD/cct/qt4reactor.py",
		"/home/cct/LabRAD/cct/scripts/experiments/Experiments729/drift_tracker_ramsey_oneline.py",
		"/home/cct/LabRAD/cct/scripts/test_dacs.py",
		"/home/cct/LabRAD/common/okfpgaservers/dacserver/DACServer.py",
		"/home/cct/LabRAD/cct/scripts/experiments/Experiments729/excitation_729.py",
		"/home/cct/LabRAD/common/clients/drift_tracker/drift_tracker.py",
		"/home/cct/LabRAD/cct/scripts/PulseSequences/advanceDACs.py",
		"/home/cct/LabRAD/cct/scripts/PulseSequences/ramsey_dephase.py",
		"/home/cct/LabRAD/cct/scripts/PulseSequences/subsequences/DopplerCooling.py",
		"/home/cct/LabRAD/cct/scripts/PulseSequences/subsequences/Ramsey.py",
		"/home/cct/LabRAD/cct/scripts/PulseSequences/subsequences/RamseyDephase.py",
		"/home/cct/LabRAD/cct/scripts/PulseSequences/subsequences/RabiExcitation.py",
		"/home/cct/LabRAD/cct/scripts/PulseSequences/subsequences/RepumpD.py",
		"/home/cct/LabRAD/cct/scripts/PulseSequences/spectrum_rabi.py",
		"/home/cct/LabRAD/cct/scripts/PulseSequences/ramsey.py",
		"/home/cct/LabRAD/cct/clients/NodeClient-control.py",
		"/home/cct/LabRAD/common/abstractdevices/DACServer.old.py",
		"/home/cct/LabRAD/common/okfpgaservers/pulser/pulse_sequences/pulse_sequences_config.py",
		"/home/cct/LabRAD/common/clients/DDS_CONTROL_config.py",
		"/home/cct/LabRAD/cct/scripts/simpleMeasurements/doublePassCalibration/calibrateDoublePass.py",
		"/home/cct/LabRAD/cct/scripts/experiments/FFT/fft_spectrum.py",
		"/home/cct/LabRAD/cct/scripts/experiments/FFT/processFFT.py",
		"/home/cct/LabRAD/cct/scripts/PulseSequences/tests/test_branching_ratio.py",
		"/home/cct/LabRAD/cct/scripts/PulseSequences/tests/test_ramsey_dephase.py",
		"/home/cct/LabRAD/cct/scripts/PulseSequences/tests/test_ramsey.py",
		"/home/cct/LabRAD/cct/scripts/PulseSequences/tests/test_spectrum_rabi.py",
		"/home/cct/LabRAD/cct/scripts/experiments/shuttling/FFTexp.py",
		"/home/cct/LabRAD/cct/scripts/experiments/Experiments729/drift_tracker.py",
		"/home/cct/LabRAD/cct/scripts/experiments/Experiments729/drift_tracker_ramsey.py",
		"/home/cct/LabRAD/cct/scripts/experiments/Experiments729/excitation_ramsey.py",
		"/home/cct/LabRAD/cct/scripts/experiments/Experiments729/excitation_ramsey_dephase.py",
		"/home/cct/LabRAD/cct/scripts/experiments/Experiments729/rabi_tomography.py",
		"/home/cct/LabRAD/cct/scripts/experiments/Experiments729/ramsey_dephase_scan_dephase_duration.py",
		"/home/cct/LabRAD/cct/scripts/experiments/Experiments729/ramsey_dephase_scan_second_pulse.py",
		"/home/cct/LabRAD/cct/scripts/experiments/Experiments729/ramsey_dephase_tomography.py",
		"/home/cct/LabRAD/cct/scripts/experiments/Experiments729/ramsey_scangap.py",
		"/home/cct/LabRAD/cct/scripts/PulseSequences/subsequences/StateReadout.py",
		"/home/cct/LabRAD/cct/scripts/experiments/Experiments729/ramsey_scanphase.py",
		"/home/cct/LabRAD/cct/scripts/experiments/Experiments729/ramsey_tomography.py",
		"/home/cct/LabRAD/cct/scripts/experiments/Experiments729/spectrum.py",
		"/home/cct/LabRAD/cct/scripts/PulseSequences/subsequences/TurnOffAll.py",
		"/home/cct/LabRAD/common/abstractdevices/script_scanner/configuration.py.example",
		"/home/cct/testdds.py",
		"/home/cct/LabRAD/common/okfpgaservers/pulser/api.py",
		"/home/cct/LabRAD/common/okfpgaservers/pulser/dds.py",
		"/home/cct/LabRAD/common/clients/script_scanner_gui/script_scanner_gui.py",
		"/home/cct/LabRAD/common/abstractdevices/DACServer.dev.py",
		"/home/cct/LabRAD/cct/scripts/PulseSequences/test729.py",
		"/home/cct/LabRAD/cct/scripts/PulseSequences/PulseSequence.py",
		"/home/cct/LabRAD/common/abstractdevices/.gitignore",
		"/home/cct/LabRAD/cct/scripts/PulseSequences/subsequences/LineTriggerTest.py",
		"/home/cct/LabRAD/cct/scripts/PulseSequences/linetest.py",
		"/home/cct/LabRAD/cct/clients/Cfiles/A_trap_e5_3multipoles.txt",
		"/home/cct/LabRAD/common/clients/DAC_CONTROL.dev.py",
		"/home/cct/LabRAD/cct/scripts/PulseSequences/subsequences/OpticalPumpingContinuous.py",
		"/home/cct/LabRAD/cct/scripts/PulseSequences/subsequences/OpticalPumpingPulsed.py",
		"/home/cct/LabRAD/cct/scripts/PulseSequences/subsequences/OpticalPumping.py",
		"/home/cct/LabRAD/common/okfpgaservers/dacserver/api.py",
		"/home/cct/LabRAD/common/okfpgaservers/pulser/pulser_ok.py",
		"/home/cct/LabRAD/common/okfpgaservers/pulser/hardwareConfiguration.py.sample",
		"/home/cct/LabRAD/common/clients/LINETRIGGER_CONTROL.py",
		"/home/cct/LabRAD/cct/scripts/PulseSequences/PlotSequence.py",
		"/home/cct/LabRAD/common/okfpgaservers/pulser/cctphoton_2.bit",
		"/home/cct/LabRAD/cct/scripts/PulseSequences/advanceDACs.py.old",
		"/home/cct/LabRAD/common/okfpgaservers/pulser/.gitignore",
		"/home/cct/LabRAD/cct/clients/DAC_CONTROL_SERIAL.py",
		"/home/cct/LabRAD/cct/clients/Cfiles/A_C_extd.txt",
		"/home/cct/LabRAD/common/abstractdevices/DacConfiguration.py.example",
		"/home/cct/LabRAD/cct/clients/DAC_CONTROL.py",
		"/home/cct/LabRAD/cct/clients/NodeClient-control-withscriptscanner.py",
		"/home/cct/LabRAD/common/clients/script_scanner_gui/scheduled_widget.py",
		"/home/cct/LabRAD/common/clients/connection_config.py",
		"/home/cct/LabRAD/cct/scripts/experiments/shuttling/__init__.py",
		"/home/cct/LabRAD/common/abstractdevices/script_scanner/sample_experiment.py",
		"/home/cct/LabRAD/common/abstractdevices/script_scanner/scan_methods.py",
		"/home/cct/LabRAD/common/abstractdevices/DACServerTEST.py",
		"/home/cct/LabRAD/common/dataservers/parameter_vault/parameter_vault.py",
		"/home/cct/LabRAD/common/abstractdevices/cctdac.conf",
		"/home/cct/LabRAD/cct/serialdevices/PIEZO_SERVER.py",
		"/home/cct/LabRAD/cct/serialdevices/ADVANTEST_SERVER.py",
		"/home/cct/LabRAD/cct/serialdevices/serialdeviceserver.py",
		"/home/cct/LabRAD/common/serialdevices/serial_server_v1_2.py",
		"/etc/udev/rules.d/assign-USB.rules",
		"/home/cct/LabRAD/common/abstractdevices/CCTDAC.py",
		"/home/cct/LabRAD/cct/clients/CCTDAC_CONTROL.py",
		"/home/cct/LabRAD/common/clients/guiscriptcontrol/scriptcontrol.py",
		"/home/cct/LabRAD/common/clients/guiscriptcontrol/configuration.py",
		"/home/cct/LabRAD/cct/scripts/experiments/Experiments729/shuttle.py",
		"/home/cct/LabRAD/common/abstractdevices/__init__.py",
		"/home/cct/LabRAD/common/clients/qtui/QCustomSpinBox.py",
		"/home/cct/LabRAD/common/serialdevices/HP8648A_SERVER.py",
		"/home/cct/LabRAD/common/clients/guiscriptcontrol/parameterswidget.py",
		"/home/cct/LabRAD/cct/scripts/experiments/shuttleExperiment.py",
		"/home/cct/LabRAD/common/clients/guiscriptcontrol/status.py",
		"/home/cct/LabRAD/common/clients/guiscriptcontrol/experimentgrid.py",
		"/home/cct/LabRAD/common/clients/guiscriptcontrol/globalgrid.py",
		"/home/cct/LabRAD/common/clients/guiscriptcontrol/configuration.py.example",
		"/home/cct/LabRAD/cct/scripts/experiments/dopplerRecooling.py",
		"/home/cct/LabRAD/common/.gitignore",
		"/home/cct/LabRAD/common/clients/control_729/control_729.py",
		"/home/cct/LabRAD/common/serialdevices/serialdeviceserver.py",
		"/home/cct/LabRAD/common/serialdevices/U3751_SERVER.py",
		"/home/cct/LabRAD/common/abstractdevices/SHUTTLE_SERVER.py",
		"/home/cct/LabRAD/cct/scripts/PulseSequences/wireVoltageMod.py"
	],
	"find":
	{
		"height": 46.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"dvPara",
			"measure",
			"types",
			"print",
			"volts",
			"+ 1",
			"print",
			"print\\",
			"print",
			"multipoleset",
			"get multipole values",
			"setPre",
			"self.multipoleset",
			"print",
			"inlineCallbacks",
			"sleep",
			"sleep(.3)\n",
			"sleep(.3)",
			"compVolts",
			"sleep(.3)\n",
			"sleep(.3)",
			"testVolts",
			"test",
			"}\".",
			"piezoControlTab",
			"lattice",
			"switch",
			"729",
			"timeResolution",
			"\")",
			"xem",
			"')\n",
			"MHz",
			"local",
			"currentPosition",
			"CNT",
			"self.multipoles",
			"defaults",
			"self.voltageMatrix",
			"print",
			"0",
			"self.__g",
			"setDACVoltage",
			"cfilename",
			"defaults",
			"print",
			"self.CfileName",
			"t",
			"T",
			"t",
			"T",
			"t",
			"T",
			"t",
			"T",
			"t",
			"T",
			"t",
			"T",
			"self.multipoles",
			"print self.multipoles",
			"    @",
			"self.multipoles",
			"getMultipoleValues",
			"get multipole values",
			"40",
			" @setting( 7",
			"print",
			"hc.multipoles",
			"hc.hultipoles",
			"self.multipolemat",
			"self.multipoleSet",
			"hc.multipoles",
			"hc.multipoes",
			"getmultip",
			"currentPosition",
			"MostRecent",
			"switch manual",
			"self.currentPosition",
			"currentPosition",
			"self.currentSet",
			"trapElectrode",
			"trapElectrodeNumber",
			"n",
			"self.currentPosition",
			"self.currentset",
			"cavity",
			"multipoleset",
			"hc.numDacChannels",
			"centerElec",
			"k",
			"hc.numElectrodes",
			"numElectrodes",
			"hc.numElectrodes",
			"self.cxn",
			"typ",
			"labrad",
			"semaph",
			"self.parameters",
			"self.SerialPorts",
			"findSer",
			"pulse",
			"NAME",
			"SERVERNAME",
			"NAME",
			"cxn",
			"self.server",
			"cctdac",
			"dac_server",
			"reset",
			"DAC",
			"self.current",
			"NumDACs",
			"InvalidChannelError",
			"print",
			"numCols",
			"self.numcols",
			"print",
			"numCols",
			"setIndividualAnalog",
			"setIndiv",
			"startPos",
			"yield",
			"FFT",
			"c.",
			"test",
			"teset",
			"lattice"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"output",
			"cct"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 14,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/home/cct/LabRAD/common/clients/DAC_CONTROL.py",
					"settings":
					{
						"buffer_size": 11788,
						"regions":
						{
						},
						"selection":
						[
							[
								6321,
								6321
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1609.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/cct/LabRAD/common/okfpgaservers/dacserver/DACServer.py",
					"settings":
					{
						"buffer_size": 15325,
						"regions":
						{
						},
						"selection":
						[
							[
								8362,
								8362
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 324.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/cct/LabRAD/common/okfpgaservers/dacserver/DACServer.dev.py",
					"settings":
					{
						"buffer_size": 13467,
						"regions":
						{
						},
						"selection":
						[
							[
								264,
								264
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 378.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/cct/LabRAD/common/abstractdevices/script_scanner/configuration.py",
					"settings":
					{
						"buffer_size": 1988,
						"regions":
						{
						},
						"selection":
						[
							[
								1260,
								1260
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 54.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "scripts/experiments/Experiments729/ramsey_scangap.py",
					"settings":
					{
						"buffer_size": 5235,
						"regions":
						{
						},
						"selection":
						[
							[
								3345,
								3345
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1188.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "scripts/PulseSequences/spectrum_rabi.py",
					"settings":
					{
						"buffer_size": 6259,
						"regions":
						{
						},
						"selection":
						[
							[
								922,
								922
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/home/cct/LabRAD/common/okfpgaservers/pulser/pulse_sequences/plot_sequence.py",
					"settings":
					{
						"buffer_size": 4908,
						"regions":
						{
						},
						"selection":
						[
							[
								17,
								17
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1620.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "scripts/PulseSequences/tests/test_sideband_cooling.py",
					"settings":
					{
						"buffer_size": 374,
						"regions":
						{
						},
						"selection":
						[
							[
								67,
								67
							]
						],
						"settings":
						{
							"auto_name": "from cct.scripts.PulseSequences.spectrum_rabi impo",
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "scripts/experiments/Experiments729/spectrum.py",
					"settings":
					{
						"buffer_size": 6993,
						"regions":
						{
						},
						"selection":
						[
							[
								806,
								806
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2340.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "scripts/scriptLibrary/dvParameters.py",
					"settings":
					{
						"buffer_size": 1982,
						"regions":
						{
						},
						"selection":
						[
							[
								35,
								35
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 270.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "clients/NodeClient-control.py",
					"settings":
					{
						"buffer_size": 1222,
						"regions":
						{
						},
						"selection":
						[
							[
								134,
								134
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "/home/cct/LabRAD/common/okfpgaservers/dacserver/DacConfiguration.py",
					"settings":
					{
						"buffer_size": 2843,
						"regions":
						{
						},
						"selection":
						[
							[
								2157,
								2157
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 270.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "scripts/experiments/Experiments729/rabi_flopping.py",
					"settings":
					{
						"buffer_size": 5246,
						"regions":
						{
						},
						"selection":
						[
							[
								335,
								335
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "/home/cct/LabRAD/common/abstractdevices/SD_tracker/SD_calculator.py",
					"settings":
					{
						"buffer_size": 5404,
						"regions":
						{
						},
						"selection":
						[
							[
								184,
								184
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "/home/cct/Desktop/test_pulser.py",
					"settings":
					{
						"buffer_size": 239,
						"regions":
						{
						},
						"selection":
						[
							[
								69,
								69
							]
						],
						"settings":
						{
							"auto_name": "import labrad",
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 27.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 271.0,
	"status_bar_visible": true
}
